diff -Naur ode-0.5/drawstuff/src/drawstuff.cpp ode-0.5_working/drawstuff/src/drawstuff.cpp
--- ode-0.5/drawstuff/src/drawstuff.cpp	2004-04-19 00:19:21.000000000 +0200
+++ ode-0.5_working/drawstuff/src/drawstuff.cpp	2005-09-12 11:48:50.907499000 +0200
@@ -80,6 +80,7 @@
 const float sky_scale = 1.0f/4.0f;	// sky texture scale (1/size)
 const float sky_height = 1.0f;		// sky height above viewpoint
 
+
 //***************************************************************************
 // misc mathematics stuff
 
@@ -229,14 +230,15 @@
   Texture (char *filename);
   ~Texture();
   void bind (int modulate);
+  void bind ();
 };
 
 
 Texture::Texture (char *filename)
 {
   image = new Image (filename);
-  glGenTextures (1,&name);
-  glBindTexture (GL_TEXTURE_2D,name);
+  glGenTextures (1, &name);
+  glBindTexture (GL_TEXTURE_2D, name);
 
   // set pixel unpacking mode
   glPixelStorei (GL_UNPACK_SWAP_BYTES, 0);
@@ -247,35 +249,41 @@
 
   // glTexImage2D (GL_TEXTURE_2D, 0, 3, image->width(), image->height(), 0,
   //		   GL_RGB, GL_UNSIGNED_BYTE, image->data());
+  // It's not a good idea to move this out of the constructor. OpenGL programmers know why.
   gluBuild2DMipmaps (GL_TEXTURE_2D, 3, image->width(), image->height(),
 		     GL_RGB, GL_UNSIGNED_BYTE, image->data());
 
-  // set texture parameters - will these also be bound to the texture???
+  // set texture parameters - will these also be bound to the texture???  Who knows......         who cares.
   glTexParameterf (GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
   glTexParameterf (GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
 
   glTexParameterf (GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
-  glTexParameterf (GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,
-		   GL_LINEAR_MIPMAP_LINEAR);
+  glTexParameterf (GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
 
-  glTexEnvf (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
+  // It's more reasonable to use GL_MODULATE instead of GL_DECAL.
+  glTexEnvf (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);  
 }
 
 
 Texture::~Texture()
 {
   delete image;
-  glDeleteTextures (1,&name);
+  glDeleteTextures (1, &name);
 }
 
-
+// just to be compatible with older sources
 void Texture::bind (int modulate)
 {
-  glBindTexture (GL_TEXTURE_2D,name);
-  glTexEnvi (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE,
-	     modulate ? GL_MODULATE : GL_DECAL);
+  glBindTexture (GL_TEXTURE_2D, name);
+  glTexEnvi (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, modulate ? GL_MODULATE : GL_DECAL);
+}
+
+void Texture::bind()
+{
+  glBindTexture (GL_TEXTURE_2D, name);
 }
 
+
 //***************************************************************************
 // the current drawing state (for when the user's step function is drawing)
 
@@ -805,30 +813,35 @@
 // textures and shadows
 static int use_textures=1;		// 1 if textures to be drawn
 static int use_shadows=1;		// 1 if shadows to be drawn
-static Texture *sky_texture = 0;
-static Texture *ground_texture = 0;
-static Texture *wood_texture = 0;
+// textures
+static Texture* texture[DS_MAXTEXTURES];
+static int texture_number = 0;
+static char* texture_prefix = 0;
 
 
 #ifndef macintosh
 
 void dsStartGraphics (int width, int height, dsFunctions *fn)
 {
-  char *prefix = DEFAULT_PATH_TO_TEXTURES;
-  if (fn->version >= 2 && fn->path_to_textures) prefix = fn->path_to_textures;
-  char *s = (char*) alloca (strlen(prefix) + 20);
-
-  strcpy (s,prefix);
+  texture_prefix = DEFAULT_PATH_TO_TEXTURES;
+  if (fn->version >= 2 && fn->path_to_textures) 
+    texture_prefix = fn->path_to_textures;
+  char *s = (char*) alloca (strlen(texture_prefix) + 20);
+  
+  memset(texture,0,sizeof(Texture*) * DS_MAXTEXTURES);
+  
+  strcpy (s,texture_prefix);
   strcat (s,"/sky.ppm");
-  sky_texture = new Texture (s);
+  texture[DS_SKY] = new Texture (s);
 
-  strcpy (s,prefix);
+  strcpy (s,texture_prefix);
   strcat (s,"/ground.ppm");
-  ground_texture = new Texture (s);
+  texture[DS_GROUND] = new Texture (s);
 
-  strcpy (s,prefix);
+  strcpy (s,texture_prefix);
   strcat (s,"/wood.ppm");
-  wood_texture = new Texture (s);
+  texture[DS_WOOD] = new Texture (s);
+  texture_number = DS_WOOD+1;
 }
 
 #else // macintosh
@@ -841,15 +854,16 @@
 
    strcpy (s,prefix);
    strcat (s,":sky.ppm");
-   sky_texture = new Texture (s);
+   texture[DS_SKY] = new Texture (s);
 
    strcpy (s,prefix);
    strcat (s,":ground.ppm");
-   ground_texture = new Texture (s);
+   texture[DS_GROUND] = new Texture (s);
 
    strcpy (s,prefix);
    strcat (s,":wood.ppm");
-   wood_texture = new Texture (s);
+   texture[DS_WOOD] =  = new Texture (s);
+   texture_number = DS_WOOD+1;
 }
 
 #endif
@@ -857,12 +871,11 @@
 
 void dsStopGraphics()
 {
-  delete sky_texture;
-  delete ground_texture;
-  delete wood_texture;
-  sky_texture = 0;
-  ground_texture = 0;
-  wood_texture = 0;
+  for(int i=0; i < texture_number; i++){
+    if(texture[i]) delete texture[i];
+    texture[i]=0;
+  }
+  texture_number=0;
 }
 
 
@@ -871,7 +884,7 @@
   glDisable (GL_LIGHTING);
   if (use_textures) {
     glEnable (GL_TEXTURE_2D);
-    sky_texture->bind (0);
+    texture[DS_SKY]->bind (0);
   }
   else {
     glDisable (GL_TEXTURE_2D);
@@ -920,7 +933,7 @@
 
   if (use_textures) {
     glEnable (GL_TEXTURE_2D);
-    ground_texture->bind (0);
+    texture[DS_GROUND]->bind (0);
   }
   else {
     glDisable (GL_TEXTURE_2D);
@@ -1094,7 +1107,7 @@
   return use_shadows;
 }
 
-
+// Enables usage of shadows
 void dsSetShadows (int a)
 {
   use_shadows = (a != 0);
@@ -1106,12 +1119,45 @@
   return use_textures;
 }
 
-
+// enables usage of textures
 void dsSetTextures (int a)
 {
   use_textures = (a != 0);
 }
 
+// This method requires a texture bind call, previously !!!
+// coat = GL_DECAL | GL_MODULATE
+void dsSetTextureCoating(int coating)
+{
+  glTexEnvf (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, coating ? GL_MODULATE : GL_DECAL);
+}
+
+// This method requires a texture bind call, previously !!!
+// Due to the fact that texture koords are provided by OpenGL
+// they will not be in the range between 0 and 1.0.
+// So the texture will repeat itself or other funny effects will happen.
+// So handle this with care and I still hope you know what you are doing.  
+void dsSetTextureCoordGen(float scale_s, float scale_t, float offs_s, float offs_t)
+{
+      glEnable (GL_TEXTURE_GEN_S);
+      glEnable (GL_TEXTURE_GEN_T);
+      glTexGeni (GL_S, GL_TEXTURE_GEN_MODE, GL_OBJECT_LINEAR);
+      glTexGeni (GL_T, GL_TEXTURE_GEN_MODE, GL_OBJECT_LINEAR);
+      static GLfloat s_params[4] = { scale_s,   0    , 0, offs_s};
+      static GLfloat t_params[4] = {   0    , scale_t, 0, offs_t};
+      glTexGenfv (GL_S, GL_OBJECT_PLANE, s_params);
+      glTexGenfv (GL_T, GL_OBJECT_PLANE, t_params);
+
+}
+
+// Is neccessary because somebody calls "dsSetTexture"
+// somewhere in the code before the texture is registered.
+// Otherwise one could put that into the "dsSetTexture" method.
+void dsBindTexture(int index)
+{   glEnable(GL_TEXTURE_2D);  
+    texture[index]->bind();
+}
+
 //***************************************************************************
 // C interface
 
@@ -1119,10 +1165,10 @@
 static void setupDrawingMode()
 {
   glEnable (GL_LIGHTING);
-  if (tnum) {
+  if (tnum > 0 && tnum < texture_number ) {
     if (use_textures) {
       glEnable (GL_TEXTURE_2D);
-      wood_texture->bind (1);
+      texture[tnum]->bind (1);
       glEnable (GL_TEXTURE_GEN_S);
       glEnable (GL_TEXTURE_GEN_T);
       glTexGeni (GL_S,GL_TEXTURE_GEN_MODE,GL_OBJECT_LINEAR);
@@ -1156,7 +1202,7 @@
   glDisable (GL_LIGHTING);
   if (use_textures) {
     glEnable (GL_TEXTURE_2D);
-    ground_texture->bind (1);
+    texture[DS_GROUND]->bind(1);
     glColor3f (SHADOW_INTENSITY,SHADOW_INTENSITY,SHADOW_INTENSITY);
     glEnable (GL_TEXTURE_2D);
     glEnable (GL_TEXTURE_GEN_S);
@@ -1236,10 +1282,32 @@
 }
 
 
-extern "C" void dsSetTexture (int texture_number)
+extern "C" void dsSetTexture (int texture_index)
 {
   if (current_state != 2) dsError ("drawing function called outside simulation loop");
-  tnum = texture_number;
+  if(texture_index < texture_number && texture_index >= 0)
+    tnum = texture_index;  
+  else
+    tnum = 0;
+}
+
+extern "C" int dsRegisterTexture (const char* filename)
+{
+  if (!texture_prefix) dsError ("No texture prefix defined");
+  if(texture_number == DS_MAXTEXTURES) 
+    dsError ("try to register too many textures");
+  char *s = (char*) alloca (strlen(texture_prefix) + strlen(filename) + 3);
+  
+  strcpy (s, texture_prefix);
+#ifndef macintosh
+  strcat (s, "/");
+#else
+  strcat (s, ":");
+#endif
+  strcat (s, filename);
+  texture[texture_number] = new Texture (s);
+  texture_number++;
+  return (texture_number-1);
 }
 
 
@@ -1303,7 +1371,7 @@
   if (use_shadows) {
     glDisable (GL_LIGHTING);
     if (use_textures) {
-      ground_texture->bind (1);
+      texture[DS_GROUND]->bind(1);
       glEnable (GL_TEXTURE_2D);
       glDisable (GL_TEXTURE_GEN_S);
       glDisable (GL_TEXTURE_GEN_T);
diff -Naur ode-0.5/drawstuff/src/imageppm.h ode-0.5_working/drawstuff/src/imageppm.h
--- ode-0.5/drawstuff/src/imageppm.h	1970-01-01 01:00:00.000000000 +0100
+++ ode-0.5_working/drawstuff/src/imageppm.h	2005-09-02 18:11:01.044955000 +0200
@@ -0,0 +1,112 @@
+#include "stdio.h"
+
+class ImagePPM
+{
+
+private:
+  int image_width, image_height;
+  unsigned char *image_data;
+
+
+static int readNumber (char *filename, FILE *f)
+{
+  int c,n=0;
+  for(;;) {
+    c = fgetc(f);
+    if (c==EOF) printf ("unexpected end of file in \"%s\"",filename);
+    if (c >= '0' && c <= '9') n = n*10 + (c - '0');
+    else {
+      ungetc (c,f);
+      return n;
+    }
+  }
+}
+
+
+static void skipWhiteSpace (char *filename, FILE *f)
+{
+  int c,d;
+  for(;;) {
+    c = fgetc(f);
+    if (c==EOF) printf ("unexpected end of file in \"%s\"",filename);
+
+    // skip comments
+    if (c == '#') {
+      do {
+	d = fgetc(f);
+	if (d==EOF) printf ("unexpected end of file in \"%s\"",filename);
+      } while (d != '\n');
+      continue;
+    }
+
+    if (c > ' ') {
+      ungetc (c,f);
+      return;
+    }
+  }
+}
+
+public:
+
+ImagePPM () 
+{   image_data = 0;
+}
+
+int loadImage(char*filename)
+{
+  FILE *f = fopen (filename,"rb");
+  if (!f) 
+  {  printf ("Can't open image file `%s'", filename);
+     return 1;
+  }
+
+  // read in header
+  if (fgetc(f) != 'P' || fgetc(f) != '6')
+    printf ("image file \"%s\" is not a binary PPM (no P6 header)",filename);
+  skipWhiteSpace (filename,f);
+
+  // read in image parameters
+  image_width = readNumber (filename,f);
+  skipWhiteSpace (filename,f);
+  image_height = readNumber (filename,f);
+  skipWhiteSpace (filename,f);
+  int max_value = readNumber (filename,f);
+
+  // check values
+  if (image_width < 1 || image_height < 1)
+    printf ("bad image file \"%s\"",filename);
+  if (max_value != 255)
+    printf ("image file \"%s\" must have color range of 255",filename);
+
+  // read either nothing, LF (10), or CR,LF (13,10)
+  int c = fgetc(f);
+  if (c == 10) {
+    // LF
+  }
+  else if (c == 13) {
+    // CR
+    c = fgetc(f);
+    if (c != 10) ungetc (c,f);
+  }
+  else ungetc (c,f);
+
+  // read in rest of data
+  image_data = new unsigned char [image_width*image_height*3];
+  if (fread( image_data, image_width*image_height*3, 1, f) != 1)
+    printf ("Can not read data from image file `%s'",filename);
+  fclose (f);
+  return 0;
+}
+
+
+~ImagePPM()
+{
+  if(image_data) delete[] image_data;
+}
+
+  int width()           { return image_width;  }
+  int height()          { return image_height; }
+  unsigned char *data() { return image_data;   }
+
+
+};
diff -Naur ode-0.5/include/drawstuff/drawstuff.h ode-0.5_working/include/drawstuff/drawstuff.h
--- ode-0.5/include/drawstuff/drawstuff.h	2003-08-29 23:26:11.000000000 +0200
+++ ode-0.5_working/include/drawstuff/drawstuff.h	2005-09-12 11:57:52.817957000 +0200
@@ -53,7 +53,10 @@
 
 /* texture numbers */
 #define DS_NONE   0	/* uses the current color instead of a texture */
-#define DS_WOOD   1
+#define DS_SKY    1
+#define DS_GROUND 2
+#define DS_WOOD   3
+#define DS_MAXTEXTURES 128
 
 
 typedef struct dsFunctions {
@@ -102,18 +105,32 @@
  */
 void dsStop();
 
+/* Registers a user defined texture and returns its number. This can be used 
+ * as parameter to dsSetTexture()   
+ */
+int dsRegisterTexture (const char* filename);
+
 /* change the way objects are drawn. these changes will apply to all further
- * dsDrawXXX() functions. the texture number must be a DS_xxx texture
- * constant. the red, green, and blue number are between 0 and 1.
- * alpha is between 0 and 1 - if alpha is not specified it's assubed to be 1.
- * the current texture is colored according to the current color.
- * at the start of each frame, the texture is reset to none and the color is
+ * dsDrawXXX() functions. The texture number must be either a DS_xxx texture
+ * constant or an integer returned by dsRegisterTexture(). 
+ * The red, green, and blue number are between 0 and 1.
+ * alpha is between 0 and 1 - if alpha is not specified it's assumed to be 1.
+ * The current texture is colored according to the current color.
+ * At the start of each frame, the texture is reset to none and the color is
  * reset to white.
  */
 void dsSetTexture (int texture_number);
 void dsSetColor (float red, float green, float blue);
 void dsSetColorAlpha (float red, float green, float blue, float alpha);
 
+// new by Dominic
+void dsSetTextureCoating(int coating);
+void dsSetTextureCoordGen(float scale_s, float scale_t, float offs_s, float offs_t);
+void dsSetCulling(int side);
+void dsBindTexture(int index);
+// end new
+
+
 /* draw objects.
  *   - pos[] is the x,y,z of the center of the object.
  *   - R[] is a 3x3 rotation matrix for the object, stored by row like this:
